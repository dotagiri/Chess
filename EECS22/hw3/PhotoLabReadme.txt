This program extends the DIP operations from the last assignment and adds Advanced DIP operations.

The new Advanced DIP operations are: Noise, Posterize and Motion Blur.

Noise uses a random number generator in order to generate a random pixel on the image to turn it into white. 
The amount of noise depends on the noise percent value which is given by (n*WIDTH*HEIGHT)/100.
A random number is generated by using the C standard function rand().
rand() is declared in the header file stdlib.h
To avoid producing the same random number, I used srand(time(NULL)) at the beginning of my function.
Therefore, everytime Noise is called, the numbers will always be random

Posterize intensifies the RGB values of an image.
I created a binary of 1's depending on the inputted bits that the user wants to posterize by.
This binary of 1's is used later to OR with the original RGB values.
Then, to make the nth bit to be 0, I shifted left a 1 in a binary of 0's depending on how many bits the user inputs.
This way, if I complement it, only that nth bit will be 0 while every other bit is 1.
If I use this binary to AND with the original RGB, only the nth bit will turn into a 0.

Motion Blur creates an illusion of vertical motion.
Before operating on pixels, I store the original values into tempRGB to prevent corruption.
To get a blur, I took the average of a fixed number of pixels up of original RGB
This fixed number depends on the inputted BlurAmount
To take the average, I took the sum of every pixel and multiplied by 0.5
The final RGB value will then be calculated by 0.5*pixel[x][y] + 0.5average(sum[x][y])
If the pixel is at the border, I don't use the formula.
To ensure that more BlurAmount blurs the image more, I used a for loop with BlurAmount as the ending index.

=========================================
As for debugging and Makefile, Makefile generates two executable files: PhotoLab, PhotoLabTest
When compiling PhotoLabTest, I included -DDEBUG in the gcc command.
This is so that, wherever I defined DEBUG in PhotoLab.c, the debug would run instead.
For PhotoLabTest, all I wanted weas AutoTest to run with the printf messages shown.
Therefore, I put the DEBUG macro at the top of my main function since the menu shouldn't show.
For the "______ tested!" messages in AutoTest, I also defined DEBUG around those printf statements
This way, the printf would only run if DEBUG is turned on. 
This means the printf will not run in PhotoLab since -DEBUG is not enabled in my Makefile.
